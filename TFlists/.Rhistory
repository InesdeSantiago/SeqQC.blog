go.cc=go.cc,
panther.pathway=pathway.list)
class(panther.classification) <- "panther.classification"
return(panther.classification)
}
db <- read.panther("PTHR15.0_human")
library(plyr)
read.panther <- function(filename="PTHR8.0_chicken") {
library(stringr)
library(plyr)
## Panther chicken classification file from
## ftp://chelsea.usc.edu/sequence_classifications/current_release/
panther <- read.delim(filename, sep="\t", head=F,
stringsAsFactors=F)
colnames(panther)[1] <- "gene.id"
colnames(panther)[3:5] <- c("panther.id", "panther.family",
"panther.subfamily")
colnames(panther)[6:8] <- c("go.mf", "go.bp", "go.cc")
colnames(panther)[9:10] <- c("panther.ontology", "panther.pathway")
## accession numbers to Entrez, UniProt, Ensembl
panther$ensembl.id <- str_match(panther$gene, "Gene=(.*)\\|")[,2]
panther$uniprot.id <- str_match(panther$gene, "UniProtKB=(.*)$")[,2]
panther$entrez.id <- str_match(panther$gene, "ENTREZ=(.*)\\|")[,2]
## function to handle the columns Gene Ontology terms
parse.go <- function(go.column) {
go.list <- str_match_all(go.column, "GO:([0-9]*)")
names(go.list) <- panther$gene.id.string
go.list <- llply(go.list, function(x) {if (!is.null(dim(x))) x[,1]})
return(go.list)
}
go.mf <- parse.go(panther$go.mf)
go.bp <- parse.go(panther$go.bp)
go.cc <- parse.go(panther$go.cc)
## Panther pathway ids
pathway.list <- str_match_all(panther$panther.pathway,
"#([G,P,S,U][0-9]*)>")
names(pathway.list) <- panther$gene.id.string
pathway.list <- llply(pathway.list,
function(x) {if (!is.null(dim(x))) x[,2]})
## Package it up as an object
panther.classification <- list(data=panther,
go.mf=go.mf,
go.bp=go.bp,
go.cc=go.cc,
panther.pathway=pathway.list)
class(panther.classification) <- "panther.classification"
return(panther.classification)
}
db <- read.panther("PTHR15.0_human")
db
colnames(db)
names(db)
db[[1]]
db[[2]]
db[[3]]
db[[4]]
names(db)
db[[5]]
unique(grch38$symbol[grch38$ensgene %in% ensg])
x <- unique(grch38$symbol[grch38$ensgene %in% ensg])
library(data.table)
fwrite(x, "/Users/santia01/Desktop/test.txt")
fwrite(data.table("gs"=x), "/Users/santia01/Desktop/test.txt")
db[[1]]
names(db[[1]])
x <- db[[1]]
which(x$uniprot.id == "Q13263")
x[19816,]
rs1 <- gene_matrix[rowSums(gene_matrix) == 1,]
nrow(rs1)
combinations <- apply(rs1,1, function(x) paste(names(x)[x==1], collapse=","))
par(mar=c(10,5,5,5))
barplot(sort(table(combinations)), las=2, cex.names=.5)
rs1
combinations
gs <- data.table("ENSG"=names(gs), "DB" = gs )
gs <- data.table("ENSG"=names(combinations), "DB" = combinations)
gs
grch38[match(ensg, grch38$ensgene),]
grch38[match(ensg, grch38$ensgene),][10,]
grch38[match(ensg, grch38$ensgene),][10,][[1]]
grch38[match(ensg, grch38$ensgene),][97,][[1]]
grch38[match(ensg, grch38$ensgene),][50,][[1]]
grch38[match(ensg, grch38$ensgene),][50,]
gs[, "GeneSymbol" := grch38$symbol[match(ensg, grch38$ensgene)]
]
grch38$symbol[match(ensg, grch38$ensgene)]
gs <- data.table("ENSG"=names(combinations), "DB" = combinations)
gs
gs[, "GeneSymbol" := grch38$symbol[match(ENSG, grch38$ensgene)] ]
gs
gs <- gs[is.na(GeneSymbol),]
gs
gs <- data.table("ENSG"=names(combinations), "DB" = combinations)
gs[, "GeneSymbol" := grch38$symbol[match(ENSG, grch38$ensgene)] ]
gs <- gs[!is.na(GeneSymbol),]
gs
any(duplicated(gs))
any(duplicated(gs$GeneSymbol))
which(duplicated(gs$GeneSymbol))
gs[which(duplicated(gs$GeneSymbol)),]
gs[, ENSG := NULL]
gs
gs <- unique(gs)
which(duplicated(gs$GeneSymbol))
gs
any(duplicated(gs$GeneSymbol))
fwrite(gs, "unique_Genes_in_TFlists.txt")
fwrite(gs, "unique_Genes_in_TFlists.txt", sep="\t")
panther_results <- fread("pantherGeneList.txt")
panther_results
panther_results <- fread("pantherGeneList.txt")
panther_results
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
fwrite(gs, "ENSG_in_TFlists.txt", sep="\t")
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
fwrite(data, "ENSG_in_TFlists.txt", sep="\t")
grch38
library(org.Hs.eg.db)
x <- org.Hs.egUNIPROT
x
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes]
)
xx
xx <- as.list(x[mapped_genes]
x <- org.Hs.egENSEMBL
x <- org.Hs.egENSEMBL
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
xx
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
# Get ENTREZ
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
data[, "ENTREZ" := grch38$entrez[match(ENSG, grch38$ensgene)] ]
any(duplicated(data$ENTREZ))
data <- data[!is.na(ENTREZ),]
any(duplicated(data$ENTREZ))
data[, ENSG := NULL] # some ENSG map to the same ENTREZ, remove them
data <- unique(data)
data(duplicated(data$ENTREZ))
any(duplicated(data$ENTREZ))
library(org.Hs.eg.db)
x <- org.Hs.egUNIPROT
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
uniprotIDs <- xx[data$ENTREZ]
uniprotIDs
data$ENTREZ
xx[data$ENTREZ]
data[, UniprotIDs := uniprotIDs]
daa
data
data <- data[ UniprotIDs != "",]
data
data <- data[!is.null(UniprotIDs),]
data
library(org.Hs.eg.db)
x <- org.Hs.egUNIPROT
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
uniprotIDs <- xx[data$ENTREZ]
uniprotIDs[is.null(uniprotIDs)] <- NA
data[, UniprotIDs := uniprotIDs]
data
is.null(uniprotIDs)
is.null(uniprotIDs)
uniprotIDs
sapply(uniprotIDs, is.null)
sapply(uniprotIDs, is.null)
# convert to UNIPROT IDs
library(org.Hs.eg.db)
x <- org.Hs.egUNIPROT
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
uniprotIDs <- xx[data$ENTREZ]
uniprotIDs[sapply(uniprotIDs, is.null)] <- NA
data[, UniprotIDs := uniprotIDs]
data
data <- data[!is.na(UniprotIDs),]
dara
data
data[,ENTREZ := NULL]
data
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
# Get ENTREZ
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
data[, "ENTREZ" := grch38$entrez[match(ENSG, grch38$ensgene)] ]
data <- data[!is.na(ENTREZ),]
# Get Gene Symbol
data[, "GeneSymbol" := grch38$symbol[match(ENSG, grch38$ensgene)] ]
data <- data[!is.na(GeneSymbol),]
# some ENSG map to the same ENTREZ or Gene Symbol, remove them
data[, ENSG := NULL]
data <- unique(data)
any(duplicated(data$ENTREZ))
data <- unique(data)
any(duplicated(data$GeneSymbol))
any(duplicated(data$ENTREZ))
data
library(org.Hs.eg.db)
x <- org.Hs.egUNIPROT
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
uniprotIDs <- xx[data$ENTREZ]
uniprotIDs[sapply(uniprotIDs, is.null)] <- NA
data[, UniprotIDs := uniprotIDs]
data <- data[!is.na(UniprotIDs),]
data[,ENTREZ := NULL]
data
install.packages("eulerr")
tidyr::unnest(data, cols = "UniprotIDs")
install.packages("tidyr")
tidyr::unnest(data, cols = "UniprotIDs")
data <- tidyr::unnest(data, cols = "UniprotIDs")
fwrite(data, "ENSG_in_TFlists.txt", sep="\t")
data
fwrite(data, "Genes_in_TFlists.txt", sep="\t")
dim(data)
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
# Get ENTREZ
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
data[, "ENTREZ" := grch38$entrez[match(ENSG, grch38$ensgene)] ]
data <- data[!is.na(ENTREZ),]
# Get Gene Symbol
data[, "GeneSymbol" := grch38$symbol[match(ENSG, grch38$ensgene)] ]
data <- data[!is.na(GeneSymbol),]
# some ENSG map to the same ENTREZ or Gene Symbol, remove them
#data[, ENSG := NULL]
data <- unique(data)
any(duplicated(data$GeneSymbol))
any(duplicated(data$ENTREZ))
# convert to UNIPROT IDs
library(org.Hs.eg.db)
x <- org.Hs.egUNIPROT
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
uniprotIDs <- xx[data$ENTREZ]
uniprotIDs[sapply(uniprotIDs, is.null)] <- NA
data[, UniprotIDs := uniprotIDs]
data <- data[!is.na(UniprotIDs),]
data[,ENTREZ := NULL]
# Many Entrez IDs mapped to several Uniprot IDs, unnest
data <- tidyr::unnest(data, cols = "UniprotIDs")
fwrite(data, "Genes_in_TFlists.txt", sep="\t")
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
# Get ENTREZ
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
data[, "ENTREZ" := grch38$entrez[match(ENSG, grch38$ensgene)] ]
data <- data[!is.na(ENTREZ),]
# Get Gene Symbol
data[, "GeneSymbol" := grch38$symbol[match(ENSG, grch38$ensgene)] ]
data <- data[!is.na(GeneSymbol),]
# some ENSG map to the same ENTREZ or Gene Symbol, remove them
#data[, ENSG := NULL]
data <- unique(data)
any(duplicated(data$GeneSymbol))
any(duplicated(data$ENTREZ))
# convert to UNIPROT IDs
library(org.Hs.eg.db)
x <- org.Hs.egUNIPROT
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
uniprotIDs <- xx[data$ENTREZ]
uniprotIDs[sapply(uniprotIDs, is.null)] <- NA
data[, UniprotIDs := uniprotIDs]
#data <- data[!is.na(UniprotIDs),]
data[,ENTREZ := NULL]
# Many Entrez IDs mapped to several Uniprot IDs, unnest
data <- tidyr::unnest(data, cols = "UniprotIDs")
fwrite(data, "Genes_in_TFlists.txt", sep="\t")
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
ensembl = useMart("ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",
host="www.ensembl.org")
genemap <- getBM( attributes = c("ensembl_gene_id", "entrezgene", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = data$ENSG,
mart = ensembl )
library(biomaRt)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
library(biomaRt)
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
ensembl = useMart("ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",
host="www.ensembl.org")
genemap <- getBM( attributes = c("ensembl_gene_id", "entrezgene", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = data$ENSG,
mart = ensembl )
genemap <- getBM( attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = data$ENSG,
mart = ensembl )
idx <- match(data$ENSG, genemap$ensembl_gene_id )
data$hgnc_symbol <- genemap$hgnc_symbol[idx]
data
gcrh38
genemap <- getBM( attributes = c("ensembl_gene_id", "hgnc_id"),
filters = "ensembl_gene_id",
values = data$ENSG,
mart = ensembl )
library(biomaRt)
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
ensembl = useMart("ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",
host="www.ensembl.org")
genemap <- getBM( attributes = c("ensembl_gene_id", "hgnc_id"),
filters = "ensembl_gene_id",
values = data$ENSG,
mart = ensembl )
idx <- match(data$ENSG, genemap$ensembl_gene_id )
data$HGNC <- genemap$hgnc_id[idx]
data
idx
sum(is.na(idx))
sum(is.na(data$HGNC))
sum(data$HGNC == "")
data$HGNC
sum(is.na(data$HGNC))
sum(is.na(data$HGNC))
sum(na.omit(is.na(data$HGNC)))
sum(na.omit(data$HGNC == ""))
sum(is.na(data$HGNC))
sum(na.omit(data$HGNC == ""))
data <- data[!is.na(data$HGNC),]
data <- data[data$HGNC != "",]
data
fwrite(data, "Genes_in_TFlists.txt", sep="\t")
any(duplicated(data$HGNC))
# Get Gene Symbol
data[, "GeneSymbol" := grch38$symbol[match(ENSG, grch38$ensgene)] ]
data <- data[!is.na(GeneSymbol),]
data
# write
data[, ENSG := NULL]
data <- unique(data)
any(duplicated(data$HGNC))
fwrite(data, "Genes_in_TFlists.txt", sep="\t")
data
panther_results <- fread("pantherGeneList.txt")
panther_results
panther_results <- fread("pantherGeneList.txt", head = FALSE)
panther_results
any(duplicated(data$HGNC))
names(panther_results)
head(panther_results)
any(duplicated(panther_results$V2))
data <- merge(data, panther_results, by.x = "HGNC", by.y = "V2")
dim(data)
data
data[, .N, by = c(DB,ProteinClass)]
head(panther_resuts)
names(panther_results) <- c("GeneID","HGNC","GeneName","PantherFamily","PantherProteinClass","Species")
panther_results
panther_results <- fread("pantherGeneList.txt", head = FALSE)
colnames(panther_results) <- c("GeneID","HGNC","GeneName","PantherFamily","PantherProteinClass","Species")
table(panther_results$Species)
panther_results <- panther_results[, c(HGNC, PantherProteinClass)]
library(biomaRt)
library(data.table)
data <- data.table("ENSG"=names(combinations), "DB" = combinations)
any(duplicated(data$ENSG))
ensembl = useMart("ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",
host="www.ensembl.org")
genemap <- getBM( attributes = c("ensembl_gene_id", "hgnc_id"),
filters = "ensembl_gene_id",
values = data$ENSG,
mart = ensembl )
idx <- match(data$ENSG, genemap$ensembl_gene_id)
sum(is.na(idx))
data$HGNC <- genemap$hgnc_id[idx]
sum(is.na(data$HGNC))
sum(na.omit(data$HGNC == ""))
data <- data[!is.na(data$HGNC),]
data <- data[data$HGNC != "",]
# Get Gene Symbol
data[, "GeneSymbol" := grch38$symbol[match(ENSG, grch38$ensgene)] ]
data <- data[!is.na(GeneSymbol),]
# write
data[, ENSG := NULL]
data <- unique(data)
any(duplicated(data$HGNC))
dim(data)
fwrite(data, "Genes_in_TFlists.txt", sep="\t")
panther_results <- fread("pantherGeneList.txt", head = FALSE)
colnames(panther_results) <- c("GeneID","HGNC","GeneName","PantherFamily","PantherProteinClass","Species")
table(panther_results$Species)
panther_results <- panther_results[, c(HGNC, PantherProteinClass)]
#merge with previous list
any(duplicated(panther_results$V2))
any(duplicated(panther_results$HGNC))
any(duplicated(data$HGNC))
data <- merge(data, panther_results, by = "HGNC")
panther_results
panther_results <- fread("pantherGeneList.txt", head = FALSE)
colnames(panther_results) <- c("GeneID","HGNC","GeneName","PantherFamily","PantherProteinClass","Species")
table(panther_results$Species)
panther_results <- panther_results[, .(HGNC, PantherProteinClass)]
#merge with previous list
any(duplicated(panther_results$HGNC))
any(duplicated(data$HGNC))
data <- merge(data, panther_results, by = "HGNC")
data
data[, .N, by = c(DB, PantherProteinClass)]
data[, .N, by = c("DB", "PantherProteinClass")]
summaryData <- data[, .N, by = c("DB", "PantherProteinClass")]
summaryData <- summaryData[PantherProteinClass != "",]
summaryData
summaryData <- data[, .N, by = "PantherProteinClass"][order(N)]
summaryData <- summaryData[PantherProteinClass != "",]
summaryData
summaryData <- data[, .N, by = "PantherProteinClass"][order(- N)]
summaryData <- summaryData[PantherProteinClass != "",]
summaryData
data <- data[PantherProteinClass != "",]
summaryData <- data[, .N, by = "PantherProteinClass"][order(- N)]
pie(table(data$PantherProteinClass))
barplot(table(data$PantherProteinClass), las=2)
data <- data[PantherProteinClass != "",]
summaryData <- data[, .N, by = c("DB", "PantherProteinClass")]
summaryData
library(ggplot2)
ggplot(data, aes(PantherProteinClass, N)) + geom_bar(stat="identity") + facet_wrap(~ DB)
library(ggplot2)
ggplot(summaryData, aes(PantherProteinClass, N)) + geom_bar(stat="identity") + facet_wrap(~ DB)
ggplot(summaryData, aes(PantherProteinClass, N)) + geom_bar(stat="identity") + facet_wrap(~ DB, scales = "free")
library(ggplot2)
ggplot(summaryData, aes(PantherProteinClass, N)) + geom_bar(stat="identity") + facet_wrap(~ DB, scales = "free") + coord_flip()
ggplot(summaryData, aes(PantherProteinClass, N, group = DB)) + geom_bar(stat="identity") +  coord_flip()
ggplot(summaryData, aes(PantherProteinClass, N, fill = DB)) + geom_bar(stat="identity") +  coord_flip()
library(ggplot2)
ggplot(summaryData, aes(PantherProteinClass, N, fill = DB)) + geom_bar(stat="identity", position="dodge") +  coord_flip()
summaryData <- data[, .N, by = c("DB", "PantherProteinClass")][order(-N)]
summaryData
data <- data[PantherProteinClass != "",]
summaryData <- data[, .N, by = c("DB", "PantherProteinClass")][order(-N)]
summaryData$PantherProteinClass <- factor(summaryData$PantherProteinClass, levels = summaryData$PantherProteinClass)
data <- data[PantherProteinClass != "",]
summaryData <- data[, .N, by = c("DB", "PantherProteinClass")][order(-N)]
summaryData$PantherProteinClass <- factor(summaryData$PantherProteinClass, levels = unique(summaryData$PantherProteinClass))
library(ggplot2)
ggplot(summaryData, aes(PantherProteinClass, N, fill = DB)) + geom_bar(stat="identity", position="dodge") +  coord_flip()
data <- data[PantherProteinClass != "",]
summaryData <- data[, .N, by = c("DB", "PantherProteinClass")][order(N)]
summaryData$PantherProteinClass <- factor(summaryData$PantherProteinClass, levels = unique(summaryData$PantherProteinClass))
library(ggplot2)
ggplot(summaryData, aes(PantherProteinClass, N, fill = DB)) + geom_bar(stat="identity", position="dodge") +  coord_flip()
data[, .N, by = "PantherProteinClass"]
data[, .N, by = "PantherProteinClass"][order(-N)]
data[, .N, by = "PantherProteinClass"][order(-N)]$PantherProteinClass
data <- data[PantherProteinClass != "",]
summaryData <- data[, .N, by = c("DB", "PantherProteinClass")]
orderClass <- data[, .N, by = "PantherProteinClass"][order(-N)]$PantherProteinClass
summaryData$PantherProteinClass <- factor(summaryData$PantherProteinClass, levels = orderClass)
library(ggplot2)
ggplot(summaryData, aes(PantherProteinClass, N, fill = DB)) + geom_bar(stat="identity", position="dodge") +  coord_flip()
data <- data[PantherProteinClass != "",]
summaryData <- data[, .N, by = c("DB", "PantherProteinClass")]
orderClass <- data[, .N, by = "PantherProteinClass"][order(-N)]$PantherProteinClass
summaryData$PantherProteinClass <- factor(summaryData$PantherProteinClass, levels = orderClass)
library(ggplot2)
ggplot(summaryData, aes(PantherProteinClass, N, fill = DB)) + geom_bar(stat="identity") +  coord_flip()
install.packages("devtools")
devtools::install_github("jaredhuling/jcolors")
library(jcolors)
ggplot(summaryData, aes(PantherProteinClass, N, fill = DB)) + geom_bar(stat="identity") +  coord_flip() + scale_fill_jcolors(palette = "pal2")
ggplot(summaryData, aes(PantherProteinClass, N, fill = DB)) + geom_bar(stat="identity") +  coord_flip() + scale_fill_jcolors(palette = "pal6")
summaryData
data[PantherProteinClass == "chromatin/chromatin-binding, or -regulatory protein(PC00077)",]
data[data$PantherProteinClass == "chromatin/chromatin-binding, or -regulatory protein(PC00077)", ..c("HGNC","DB")] %>% unique()
data[data$PantherProteinClass == "chromatin/chromatin-binding, or -regulatory protein(PC00077)", ..("HGNC","DB")] %>% unique()
data[PantherProteinClass == "chromatin/chromatin-binding, or -regulatory protein(PC00077)", c(HGNC,DB)] %>% unique()
data[PantherProteinClass == "chromatin/chromatin-binding, or -regulatory protein(PC00077)", .c(HGNC,DB)] %>% unique()
data[PantherProteinClass == "chromatin/chromatin-binding, or -regulatory protein(PC00077)", list(HGNC,DB)] %>% unique()
data[PantherProteinClass == "chromatin/chromatin-binding, or -regulatory protein(PC00077)", list(GeneSymbol,DB)] %>% unique()
data[PantherProteinClass == "chromatin/chromatin-binding, or -regulatory protein(PC00077)", list(DB,GeneSymbol)] %>% unique()
orderClass
data[PantherProteinClass == "chromatin/chromatin-binding, or -regulatory protein(PC00077)", list(DB,GeneSymbol)] %>% unique()
data[PantherProteinClass == "RNA binding protein(PC00031)", list(DB,GeneSymbol)] %>% unique()
data[PantherProteinClass == "ubiquitin-protein ligase(PC00234)", list(DB,GeneSymbol)] %>% unique()
data[PantherProteinClass == "general transcription factor(PC00259)" , list(DB,GeneSymbol)] %>% unique()
data[PantherProteinClass == "RNA splicing factor(PC00148)"  , list(DB,GeneSymbol)] %>% unique()
data[PantherProteinClass == "scaffold/adaptor protein(PC00226)"  , list(DB,GeneSymbol)] %>% unique()
gene_matrix <- gene_matrix[rowSums(gene_matrix) >= 2,]
gene_matrix
final_TF_list <- data.table("ENSG" = rownames(gene_matrix), "evidence" = apply(gene_matrix,1, function(x) paste(names(x)[x==1])))
final_TF_list
gene_matrix <- gene_matrix[rowSums(gene_matrix) >= 2,]
final_TF_list <- data.table("ENSG" = rownames(gene_matrix), "evidence" = apply(gene_matrix,1, function(x) paste(names(x)[x==1])))
final_TF_list
